package chap12;

// 1. 상속의 사용 전 후
// 사용 이전 -> 문제마다 클래스를 만들어야 했음
// 사용 이후 0> 기존 클래스를 재활용하고 필요한 내용을 추가할 수 있음

// 2. 상속의 의미
// 클래스가 다른 클래스의 속성과 메서드를 물려받아 재사용할 수 있도록 하는 기법
// 부모 클래스 --> 자식 클래스 (속성, 메서드 활용 가능)

// 3. 싱속
// 하위 인스턴스를 생성하면 상속받은 클래스의 속성, 기능을 쓸 수 있음
// 하위 클래스에서 추가되는 부분만 작성하면 됨

// 4. 상속의 주요 개념
// 4-1. 부모 클래스
// 상위 클래스이며 다른 말로 super class라고 함
// 상속을 통해 속성과 메서드가 전달되는 클래스
// 4-2. 자식 클래스
// 하위 클래스이며 다른 말로 sub class라고 함
// 상위 클래스의 상속을 받아 속성과 메서드를 재사용하거나 확장하는 클래스

// 5. 상속의 필요성
// 5-1. 코드 재사용 : 기존 코드(클래스)를 상속 기법을 통해 개발 시간을 단축하고 중복을 제거하는 효과
// 5-2. 유지보수 편리 : 상속 구조를 통해 필요한 부분만 고치면 전체 상속 구조에 쉽게 영향을 미침
// 5-3. 쉬운 확장 : 새로운 클래스(상속받는 클래스)에서 추가 기능만 추가하는 것으로 쉽게 확장 가능

// 6. IS-A 관계 : 상속이 바람직한 관계
// 싱속받은 클래스가 상속 받을 클래스의 한 종류의 관계일 때
// <-> 바람직하지 않은 상속 : 클래스의 특정 부문을 재활용할 목적으로 상속 받는 것

// extends 예약어를 사용하여 사용
public class Inheritance extends InheritanceTest{

}
