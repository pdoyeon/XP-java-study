package chap11;

import chap10.InformationHiding;

public class informationHiding {
    // 1. 정보 은닉
    // 객체지향 프로그래밍을 위해 클래스 작성 시 다른 클래스가 활용해야 하는 정보만 공개하고
    // 필요 없거나 사용 방법이 제한돼야 하는 정보는 비공개 또는 접근 제한하는 방법
    // 클래스를 활용하는데 필요한 정보를 제외하고 보이지 않고 바꿀 수 없게 만들어 개발 용이성과 함께 보안/안정성 제공

    // 2. 정보 은닉 기법 (캡슐화, 업캐스팅, 인터페이스/추상클래스)

    // 2-1. 캡슐화
    // 클래스 내부에서 사용할 변수나 메서드를 private으로 선언하여 외부에서 접근하지 못하도록 막는 방법
    // 데이터 접근을 공개(public) 메서드(getter/setter)들을 제공
    private String address;

    // 2-2. getter/setter 패턴
    // 정의 -> 클래스의 멤버 변수(데이터)에 대한 외부의 직접 조작(접근)을 막고 메서드를 이용해 값을 꺼내오거나 수정하는 방법
    // 필요성 -> 데이터의 처리 방식을 메서드로 정해두고 처리해 데이터의 무결성(정확성, 일관성, 유효성)을 유지하는 검증
    //       -> 정보 은닉이 가능 (데이터에 대한 접근 제한)
    //준비해야 할 메서드
    // -> getter : 외부에서 객체의 데이터를 읽을 때 사용하는 메서드
    public String getAddress() {
        return address;
    }
    // -> setter : 외부에서 객체의 데이터를 수정할 때 사용하는 메서드
    public void setAddress(String address) {
        this.address = address;
    }
    // --> 사용하기 전 : 멤버 변수를 외부에서 접근 가능
    // --> 사용 후 : 멤버 변수를 숨기고(은닉) 메서드로 접근 및 수정이 가능하게 만듦

    // 3. this 예약어
    // 생성된 인스턴스(메모리에 올라와있는 클래스)를 가리키는 예약어

    // 3-1. 멤버변수/함수 카리킴
    // this가 인스턴스를 나타내므로 혼동없이 멤버변수/함수를 가리킴
    // -> 이러한 점을 이용하여 클래스 내부 변수와 외부 변수를 명확히 구분
    public informationHiding(String address) {
        this.address = address; // this
    }

    // 3-2. 다른 생성자 호출
    // this를 메서드처럼 사용하면 생성자 역할을 함
    // -> 생성자에서 다른 생성자(오버로딩된)를 호출하여 생성 시 초기화 정리 가능
//    InformationHiding() {
//        this("");
//    }

    // 3-3. 자신(인스턴스)의 메모리 위치
    // this는 실행 상태의 인스턴스의 메모리 위치(주소 값)를 가리킴
    public void printThis() {
        System.out.println(this);   // 클래스 자신의 주소를 나타냄
    }

    // 3-4. 인스턴스 자체
    // 메서드에 자신을 반환(return)하면 체인 형식으로 메서드 호출 가능

    // 4. static (정적 변수)

    // 4-1. static 예약어
    // 인스턴스 특징 (한계)
    // -> 클래스 생성할 때 마다 새로 속성/메서드가 새로 생성됨
    // -> 개별 인스턴스 별로 속성/메서드가 각각 메모리가 존재하고 따로 관리됨
    // 필요성
    // -> 인스턴스가 공유하는 변수(속성)나 메서드가 있다면?
    // --> 사례 : 공유된 변수는 인스턴스에서 서로 같은 값(수정하면 다른 곳에도 영향을 미침)
    
    // 4-2. static 변수/메서드
    // 클래스 변수 (static 변수)
    // -> 인스턴스 변수를 공유하기 위한 정적 변수로 선언
    private static int serialNUm = 1000;
    // 클래스 메서드 (static 메서드)
    // -> 인스턴스 메서드를 공유하기 위해 정적 메서드로 선언
    public static int getSeriaNUm() {
        return serialNUm;
    }
    // 선언 방법 (static) -> 접근제어자 반환자료형 사이에 static 예약어 추가

    // 4-3. static 사용 시 주의점
    // 정적변수(클래스 변수)와 정적메서드(클래스메서드)는 인스턴스 생성 없이도 선언이 가능
    // 정적 변수에서 비해 일반 인스턴스 변수들은 인스턴스가 생성되어야 하므로 정적메서드에서 사용할 때 주의해야 함
    // 변수의 유효 범위르 따져서 개발해야함

}
